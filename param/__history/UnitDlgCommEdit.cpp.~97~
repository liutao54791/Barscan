//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop
#include <iostream.h>

#include "UnitDlgCommEdit.h"

#include "SocketServerNet.h"

#include <System.IniFiles.hpp>
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "cxButtons"
#pragma link "cxClasses"
#pragma link "cxContainer"
#pragma link "cxControls"
#pragma link "cxEdit"
#pragma link "cxGraphics"
#pragma link "cxLookAndFeelPainters"
#pragma link "cxLookAndFeels"
#pragma link "cxMaskEdit"
#pragma link "cxSpinEdit"
#pragma link "cxTextEdit"
#pragma link "dxLayoutContainer"
#pragma link "dxLayoutControl"
#pragma link "dxLayoutcxEditAdapters"
#pragma link "dxLayoutLookAndFeels"
#pragma link "dxSkinBlack"
#pragma link "dxSkinBlue"
#pragma link "dxSkinBlueprint"
#pragma link "dxSkinCaramel"
#pragma link "dxSkinCoffee"
#pragma link "dxSkinDarkRoom"
#pragma link "dxSkinDarkSide"
#pragma link "dxSkinDevExpressDarkStyle"
#pragma link "dxSkinDevExpressStyle"
#pragma link "dxSkinFoggy"
#pragma link "dxSkinGlassOceans"
#pragma link "dxSkinHighContrast"
#pragma link "dxSkiniMaginary"
#pragma link "dxSkinLilian"
#pragma link "dxSkinLiquidSky"
#pragma link "dxSkinLondonLiquidSky"
#pragma link "dxSkinMcSkin"
#pragma link "dxSkinMetropolis"
#pragma link "dxSkinMetropolisDark"
#pragma link "dxSkinMoneyTwins"
#pragma link "dxSkinOffice2007Black"
#pragma link "dxSkinOffice2007Blue"
#pragma link "dxSkinOffice2007Green"
#pragma link "dxSkinOffice2007Pink"
#pragma link "dxSkinOffice2007Silver"
#pragma link "dxSkinOffice2010Black"
#pragma link "dxSkinOffice2010Blue"
#pragma link "dxSkinOffice2010Silver"
#pragma link "dxSkinOffice2013DarkGray"
#pragma link "dxSkinOffice2013LightGray"
#pragma link "dxSkinOffice2013White"
#pragma link "dxSkinOffice2016Colorful"
#pragma link "dxSkinOffice2016Dark"
#pragma link "dxSkinPumpkin"
#pragma link "dxSkinsCore"
#pragma link "dxSkinscxPCPainter"
#pragma link "dxSkinsDefaultPainters"
#pragma link "dxSkinSeven"
#pragma link "dxSkinSevenClassic"
#pragma link "dxSkinSharp"
#pragma link "dxSkinSharpPlus"
#pragma link "dxSkinSilver"
#pragma link "dxSkinSpringTime"
#pragma link "dxSkinStardust"
#pragma link "dxSkinSummer2008"
#pragma link "dxSkinTheAsphaltWorld"
#pragma link "dxSkinValentine"
#pragma link "dxSkinVisualStudio2013Blue"
#pragma link "dxSkinVisualStudio2013Dark"
#pragma link "dxSkinVisualStudio2013Light"
#pragma link "dxSkinVS2010"
#pragma link "dxSkinWhiteprint"
#pragma link "dxSkinXmas2008Blue"
#pragma link "UnitDialogBase"
#pragma link "dxScreenTip"
#pragma resource "*.dfm"   //#pragma resource "*.dfm"表示把*.dfm文件中的资源加入工程。*.dfm中包括窗体外观的定义。
TDlgCommEdit *DlgCommEdit;

//---------------------------------------------------------------------------
static vector<String> split(const string &s, const string &seperator){
  vector<string> result;
  typedef string::size_type string_size;
  string_size i = 0;
  
  while(i != s.size()){
    //找到字符串中首个不等于分隔符的字母；
    int flag = 0;
    while(i != s.size() && flag == 0){
      flag = 1;
      for(string_size x = 0; x < seperator.size(); ++x)
    　　if(s[i] == seperator[x]){
      　　++i;
      　　flag = 0;
     　　 break;
    　　}
    }
    
    //找到又一个分隔符，将两个分隔符之间的字符串取出；
    flag = 0;
    string_size j = i;
    while(j != s.size() && flag == 0){
      for(string_size x = 0; x < seperator.size(); ++x)
    　　if(s[j] == seperator[x]){
      　　flag = 1;
     　　 break;
    　　}
      if(flag == 0) 
    　　++j;
    }
    if(i != j){
      result.push_back(s.substr(i, j-i));
      i = j;
    }
  }
  return result;
}

__fastcall TDlgCommEdit::TDlgCommEdit(TComponent* Owner)
	: TDialogBase(Owner)
{

}

//---------------------------------------------------------------------------
void TDlgCommEdit::LoadConfigure()
{
	String strFileName = ChangeFileExt(ParamStr(0),".ini");
	TIniFile* pifReader = new TIniFile(strFileName);

	cxTextEditIp->Text = pifReader->ReadString("DEVICE","IP","");
	cxSpinEditPort->Value = pifReader->ReadInteger("DEVICE","PORT",11240);

	cxTextEditUDPIp->Text = pifReader->ReadString("UDPSERVER","IP","");
	cxSpinEditUDPPort->Value = pifReader->ReadInteger("UDPSERVER","PORT",11260);

	char    Buffer[64];
	HOSTENT FAR *pHost;
	String  IPAddress;

	gethostname(Buffer, 64);
	pHost  = gethostbyname(Buffer);
	IPAddress = inet_ntoa(*(struct in_addr*)pHost->h_addr_list[0]);

	cxTextTCPServerIP->Text = IPAddress;
	delete pifReader;
}
//---------------------------------------------------------------------------
void TDlgCommEdit::SaveConfigure()
{
	String strFileName = ChangeFileExt(ParamStr(0),".ini");
	TIniFile* pifWriter = new TIniFile(strFileName);

	pifWriter->WriteString("DEVICE","IP",cxTextEditIp->Text );
	pifWriter->WriteInteger("DEVICE","PORT",cxSpinEditPort->Value);

	pifWriter->WriteString("UDPSERVER","IP",cxTextEditUDPIp->Text );
	pifWriter->WriteInteger("UDPSERVER","PORT",cxSpinEditUDPPort->Value);

	delete pifWriter;
}

void __fastcall TDlgCommEdit::cxButtonOkClick(TObject *Sender)
{
	SaveConfigure();
	std::vector<String> Token ;

	static TidServerNet* ServerNet = NULL;
	if (ServerNet == NULL)
	{
		ServerNet = new TidServerNet();
		if (ServerNet->Init(cxSpinEditTCPServerPort->Value) == SocketOk)
		{
			ServerNet->Run();
			Token = split(cxTextEditUDPIp->Text,",");
		}
	}else
	{
		ShowMessage("TCP Server Already Run");
	}

}
//---------------------------------------------------------------------------
void __fastcall TDlgCommEdit::FormShow(TObject *Sender)
{
	LoadConfigure();
}
//---------------------------------------------------------------------------




