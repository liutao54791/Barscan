//---------------------------------------------------------------------------

#ifndef UnitTcBusCommandH
#define UnitTcBusCommandH
//---------------------------------------------------------------------------
//#include <System.Classes.hpp>

//------------------------------common------------------------------------------

//template<class T1>
class TTcBusCommand
{
public:
	TTcBusCommand();
	~TTcBusCommand();
public:
	//void BuildCommand(T1* pParam,unsigned char* pbData,int& nSize);
	//void AnalyseResponse(unsigned char* pbData,int nSize,T2* pvRet);
};
/*
template<class T1,class T2>
TTcBusCommand<T1,T2>::TTcBusCommand()
{

}

template <class T1,class T2>
TTcBusCommand<T1,T2>::~TTcBusCommand()
{

}



//-------------------------SINGLE_RELAY_CONTROL---------------------------------

typedef struct _tagSINGLE_RELAY_CONTROL_PARAM
{
	BYTE nRelayNo;
	enum RelayState
	{
		rsOn = 0xAA,
		rsOff = 0x55
	}rsState;
}SINGLE_RELAY_CONTROL_PARAM,*PSINGLE_RELAY_CONTROL_PARAM;

typedef struct _tagCONTROL_RESPONSE
{
	BYTE nResult;
	unsigned short nErrorCode;
}CONTROL_RESPONSE,*PCONTROL_RESPONSE;

template<>
class TTcBusCommand<SINGLE_RELAY_CONTROL_PARAM,CONTROL_RESPONSE>
{
public:
	TTcBusCommand();
	~TTcBusCommand();
public:
	void BuildeCommand(SINGLE_RELAY_CONTROL_PARAM* pvParam,unsigned char* pbData,int& nSize);
	void AnalyseResponse(unsigned char* pbData,int nSize,CONTROL_RESPONSE* pvRet);
};

//-------------------------SINGLE_RELAY_CONTROL---------------------------------
*/

#endif
